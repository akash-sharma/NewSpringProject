http://docs.spring.io/spring-security/site/docs/3.0.x/reference/ns-config.html

http://www.baeldung.com/2012/12/20/authentication-against-a-restful-service/

****http://docs.spring.io/spring-security/site/docs/3.0.x/reference/technical-overview.html

***http://www.baeldung.com/2011/10/31/securing-a-restful-web-service-with-spring-security-3-1-part-3/

====pom.xml====

<spring-security-version>3.2.5.RELEASE</spring-security-version>

<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-core</artifactId>
	<version>${spring-security-version}</version>
</dependency>
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-web</artifactId>
	<version>${spring-security-version}</version>
</dependency>
<dependency>
	<groupId>org.springframework.security</groupId>
	<artifactId>spring-security-config</artifactId>
	<version>${spring-security-version}</version>
</dependency>





------------------------------------------------

=====spring-security.xml=====




<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://www.springframework.org/schema/beans
           http://www.springframework.org/schema/beans/spring-beans.xsd
           http://www.springframework.org/schema/security
           http://www.springframework.org/schema/security/spring-security-3.2.xsd">
    ...
</beans:beans>




------------------------------------------------

web.xml


<filter>
  <filter-name>springSecurityFilterChain</filter-name>
  <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>
</filter>

<filter-mapping>
  <filter-name>springSecurityFilterChain</filter-name>
  <url-pattern>/*</url-pattern>
</filter-mapping>




This provides a hook into the Spring Security web infrastructure. DelegatingFilterProxy is a Spring Framework class which delegates to a filter
 implementation which is defined as a Spring bean in your application context. In this case, the bean is named “springSecurityFilterChain”,
 which is an internal infrastructure bean created by the namespace to handle web security.
Web security services are configured using the <http> element.




----------------------------------------------------------


(1)

The <http> element is the parent for all web-related namespace functionality. The <intercept-url> element defines a pattern which is matched
 against the URLs of incoming requests using an ant path style syntax[2].
 The access attribute defines the access requirements for requests matching the given pattern. 



<http auto-config='true'>
	<intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
	<intercept-url pattern="/**" access="IS_AUTHENTICATED_REMEMBERED" />
	<form-login 
	    	login-page='/login' 
		default-target-url="/" 
		authentication-failure-url="/login?error" 
		username-parameter="j_username"
		password-parameter="j_password" />
</http>




(2)

<authentication-manager>
	<authentication-provider user-service-ref="customUserDetailsService">  
		<password-encoder hash="plaintext" />
	</authentication-provider>  
</authentication-manager>



OR
<password-encoder hash="sha"/>




(3)

This class is used for autheticating user and loading user object in spring session.
How a user can be authenticated only by its username ?
It must be a combination of username and password.

class implementing  org.springframework.security.core.userdetails.UserDetailsService


public UserDetails loadUserByUsername(String login) throws UsernameNotFoundException ;





(4) Two tables are created: Users , Authorities

(schema will be created by hibernate automaically.)

create table users(
      username varchar_ignorecase(50) not null primary key,
      password varchar_ignorecase(50) not null,
      enabled boolean not null);

  create table authorities (
      username varchar_ignorecase(50) not null,
      authority varchar_ignorecase(50) not null,
      constraint fk_authorities_users foreign key(username) references users(username));
      create unique index ix_auth_username on authorities (username,authority);



(5)

org.springframework.security.core.userdetails.Users.java  impelements Serializable
org.springframework.security.core.GrantedAuthority.java   impelements Serializable


The VO class that is managed in session must implement  org.springframework.security.core.userdetails.Users.java class .



Users.java

	private String password;
    	private final String username;
    	private final Set<GrantedAuthority> authorities;
    	private final boolean accountNonExpired;
    	private final boolean accountNonLocked;
    	private final boolean credentialsNonExpired;
    	private final boolean enabled;



Authorities.java implement org.springframework.security.core.GrantedAuthority.java  interface




